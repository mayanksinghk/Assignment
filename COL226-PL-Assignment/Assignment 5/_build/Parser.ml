type token =
  | INT of (int)
  | BOOL of (bool)
  | ID of (string)
  | MULT
  | PLUS
  | AND
  | OR
  | CMP
  | IFTE
  | LAMBDA
  | IF
  | THEN
  | ELSE
  | FI
  | EOF
  | RP
  | LP

open Parsing;;
let _ = parse_error;;
# 2 "Parser.mly"
    open Krivine
    exception Exp of string
# 26 "Parser.ml"
let yytransl_const = [|
  260 (* MULT *);
  261 (* PLUS *);
  262 (* AND *);
  263 (* OR *);
  264 (* CMP *);
  265 (* IFTE *);
  266 (* LAMBDA *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
  270 (* FI *);
    0 (* EOF *);
  271 (* RP *);
  272 (* LP *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\003\000\003\000\004\000\
\004\000\005\000\005\000\006\000\006\000\007\000\007\000\008\000\
\008\000\009\000\009\000\010\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\001\000\004\000\001\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\007\000\
\001\000\002\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\021\000\022\000\020\000\000\000\000\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\015\000\017\000\019\000\018\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\006\000\000\000\005\000\
\000\000\000\000\000\000\000\000\014\000\000\000\003\000\000\000\
\000\000\016\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000"

let yysindex = "\002\000\
\026\255\000\000\000\000\000\000\000\000\049\255\001\255\026\255\
\026\255\000\000\008\000\250\254\009\255\005\255\012\255\015\255\
\000\000\000\000\000\000\000\000\004\255\010\255\006\255\000\000\
\026\255\038\255\038\255\038\255\038\255\000\000\026\255\000\000\
\011\255\005\255\012\255\015\255\000\000\017\255\000\000\026\255\
\019\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\009\000\060\000\045\000\024\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\035\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\248\255\249\255\004\000\000\000\005\000\011\000\015\000\018\000\
\000\000\038\000"

let yytablesize = 332
let yytable = "\022\000\
\013\000\023\000\001\000\021\000\003\000\004\000\005\000\024\000\
\004\000\025\000\027\000\006\000\012\000\007\000\008\000\026\000\
\028\000\033\000\029\000\002\000\032\000\031\000\038\000\011\000\
\030\000\039\000\003\000\004\000\005\000\040\000\034\000\041\000\
\042\000\006\000\010\000\007\000\008\000\035\000\003\000\004\000\
\005\000\009\000\036\000\020\000\009\000\006\000\037\000\000\000\
\008\000\003\000\004\000\005\000\000\000\000\000\008\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\013\000\013\000\013\000\
\000\000\000\000\000\000\000\000\013\000\013\000\013\000\013\000\
\013\000\012\000\012\000\012\000\004\000\004\000\004\000\004\000\
\012\000\012\000\012\000\012\000\012\000\011\000\011\000\002\000\
\002\000\002\000\000\000\011\000\011\000\011\000\011\000\011\000\
\010\000\010\000\000\000\000\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\009\000\000\000\000\000\000\000\000\000\
\009\000\009\000\009\000\009\000\009\000\008\000\000\000\000\000\
\000\000\000\000\008\000\008\000\008\000\008\000\008\000\007\000\
\007\000\007\000\007\000\007\000"

let yycheck = "\008\000\
\000\000\009\000\001\000\003\001\001\001\002\001\003\001\000\000\
\000\000\016\001\006\001\008\001\000\000\010\001\011\001\007\001\
\005\001\025\000\004\001\000\000\015\001\012\001\031\000\000\000\
\021\000\015\001\001\001\002\001\003\001\013\001\026\000\040\000\
\014\001\008\001\000\000\010\001\011\001\027\000\001\001\002\001\
\003\001\016\001\028\000\006\000\000\000\008\001\029\000\255\255\
\011\001\001\001\002\001\003\001\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\005\001\006\001\007\001\012\001\013\001\014\001\015\001\
\012\001\013\001\014\001\015\001\016\001\006\001\007\001\012\001\
\013\001\014\001\255\255\012\001\013\001\014\001\015\001\016\001\
\006\001\007\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\007\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\012\001\
\013\001\014\001\015\001\016\001"

let yynames_const = "\
  MULT\000\
  PLUS\000\
  AND\000\
  OR\000\
  CMP\000\
  IFTE\000\
  LAMBDA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  EOF\000\
  RP\000\
  LP\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fcall) in
    Obj.repr(
# 16 "Parser.mly"
                                                     ( _1 )
# 211 "Parser.ml"
               : Krivine.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fcall) in
    Obj.repr(
# 17 "Parser.mly"
                                                     ( _1 )
# 218 "Parser.ml"
               : Krivine.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fabs) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fcall) in
    Obj.repr(
# 20 "Parser.mly"
                                          ( App(_1,_3) )
# 226 "Parser.ml"
               : 'fcall))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fabs) in
    Obj.repr(
# 21 "Parser.mly"
                                          ( _1 )
# 233 "Parser.ml"
               : 'fcall))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fcall) in
    Obj.repr(
# 22 "Parser.mly"
                                          ( _2 )
# 240 "Parser.ml"
               : 'fcall))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fabs) in
    Obj.repr(
# 26 "Parser.mly"
                                          ( Lambda(V(_2),_3) )
# 248 "Parser.ml"
               : 'fabs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_exp) in
    Obj.repr(
# 27 "Parser.mly"
                                          ( _1 )
# 255 "Parser.ml"
               : 'fabs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 31 "Parser.mly"
                                          ( Or(_1,_3) )
# 263 "Parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_exp) in
    Obj.repr(
# 32 "Parser.mly"
                                          ( _1 )
# 270 "Parser.ml"
               : 'or_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_exp) in
    Obj.repr(
# 35 "Parser.mly"
                                          ( And(_1,_3) )
# 278 "Parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_exp) in
    Obj.repr(
# 36 "Parser.mly"
                                          ( _1 )
# 285 "Parser.ml"
               : 'and_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 39 "Parser.mly"
                                          ( Plus(_1,_3) )
# 293 "Parser.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_exp) in
    Obj.repr(
# 40 "Parser.mly"
                                          ( _1 )
# 300 "Parser.ml"
               : 'add_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 43 "Parser.mly"
                                          ( Mult(_1,_3) )
# 308 "Parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ifte_expression) in
    Obj.repr(
# 44 "Parser.mly"
                                          ( _1 )
# 315 "Parser.ml"
               : 'mult_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Krivine.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Krivine.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : Krivine.expr) in
    Obj.repr(
# 47 "Parser.mly"
                                                               ( If_Then_Else(_2,_4,_6) )
# 324 "Parser.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmp_expression) in
    Obj.repr(
# 48 "Parser.mly"
                                                               ( _1 )
# 331 "Parser.ml"
               : 'ifte_expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 51 "Parser.mly"
                                                               ( Cmp(_2) )
# 338 "Parser.ml"
               : 'cmp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 52 "Parser.mly"
                                                               ( _1 )
# 345 "Parser.ml"
               : 'cmp_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "Parser.mly"
                                                    ( V(_1) )
# 352 "Parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 56 "Parser.mly"
                                                    ( Integer(_1) )
# 359 "Parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 57 "Parser.mly"
                                                    ( Bool(_1) )
# 366 "Parser.ml"
               : 'constant))
(* Entry exp_parser *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp_parser (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Krivine.expr)
